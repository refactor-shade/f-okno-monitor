import os
import time
import json
import logging
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import List, Dict

import requests
from bs4 import BeautifulSoup

# Selenium 4+ —Å Selenium Manager (–±–µ–∑ —Ä—É—á–Ω–æ–≥–æ chromedriver)
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


# ---------- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ / –æ–∫—Ä—É–∂–µ–Ω–∏–µ ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

LOGIN_URL = os.getenv(
    "LOGIN_URL",
    "https://f-okno.ru/login?request_uri=%2Fbase%2Fmoscovskaya_oblast%2Fsizo11noginsk",
)
TARGET_URL = os.getenv(
    "TARGET_URL",
    "https://f-okno.ru/base/moscovskaya_oblast/sizo11noginsk",
)
STATE_FILE = os.getenv("STATE_FILE", "state_sizo11.json")
ONLY_NOTIFY_WHEN_FREE = os.getenv("ONLY_NOTIFY_WHEN_FREE", "1") == "1"

MOSCOW_TZ = ZoneInfo("Europe/Moscow")


# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def send_tg(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (HTML)."""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logging.warning("TELEGRAM_* –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    try:
        r = requests.post(url, json=payload, timeout=15)
        if r.status_code != 200:
            logging.warning("Telegram send failed: %s %s", r.status_code, r.text[:200])
    except Exception:
        logging.exception("Telegram send exception")


def load_last_snapshot() -> str:
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        return ""
    except Exception:
        logging.exception("load_last_snapshot failed")
        return ""


def save_snapshot(snapshot: str) -> None:
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            f.write(snapshot)
    except Exception:
        logging.exception("save_snapshot failed")


def format_slots(slots: List[Dict], only_available: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã —Å–ø–∏—Å–∫–æ–º (—Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)."""
    if not slots:
        return "–°–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç."

    filtered = [s for s in slots if s.get("status") == "–°–≤–æ–±–æ–¥–Ω–æ"] if only_available else slots
    if not filtered:
        return "–°–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç."

    lines = []
    for s in filtered:
        d = (s.get("date") or "").strip()
        if not d:
            continue
        # –≥–∞–ª–æ—á–∫–∞ –∏ –∂–∏—Ä–Ω—ã–π
        lines.append(f"‚úÖ <b>{d}</b>")
    return "\n".join(lines) if lines else "–°–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç."


# ---------- Selenium ----------
def make_driver() -> webdriver.Chrome:
    """–ó–∞–ø—É—Å–∫–∞–µ–º Chrome; Selenium Manager —Å–∞–º –ø–æ–¥–±–µ—Ä—ë—Ç chromedriver."""
    opts = Options()
    opts.add_argument("--headless=new")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    # –ù–ò–ß–ï–ì–û –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–æ –ø—É—Ç—å –∫ chromedriver
    return webdriver.Chrome(service=Service(), options=opts)


def login(driver: webdriver.Chrome) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞/—Ü–µ–ª–µ–≤—É—é, –∂–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã."""
    driver.get(LOGIN_URL)
    # –î–∞–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—å—Å—è
    try:
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "form"))
        )
    except Exception:
        # –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–æ—Ä–º—ã –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–º HTML –¥–ª—è –¥–µ–±–∞–≥–∞
        logging.warning("Login page wait timeout")


# ---------- –ø–∞—Ä—Å–∏–Ω–≥ HTML ----------
def parse_slots_from_html(html: str) -> List[Dict]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä. –ò—â–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–∞—Ç –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã.
    –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–µ—Ä—Å—Ç–∫–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫:
    [{"date": "16 –æ–∫—Ç—è–±—Ä—è —á–µ—Ç–≤–µ—Ä–≥", "status": "–°–≤–æ–±–æ–¥–Ω–æ"|"–ù–µ—Ç –º–µ—Å—Ç"}, ...]
    """
    # –µ—Å–ª–∏ –≤ requirements –¥–æ–±–∞–≤–∏–ª–∏ lxml ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ. –ò–Ω–∞—á–µ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å "html.parser"
    soup = BeautifulSoup(html, "lxml")

    slots: List[Dict] = []

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ —è–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ç–∏–ø–∏—á–Ω—ã–º –∫–ª–∞—Å—Å–∞–º
    # (—ç—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –º–æ–∂–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–æ—á–∏—Ç—å –ø–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å—Ç–∫—É)
    candidate_nodes = soup.select(".calendar .day, .calendar .item, .slots-list .slot, .day-item")

    if candidate_nodes:
        for node in candidate_nodes:
            text = node.get_text(" ", strip=True)
            if not text:
                continue

            # —Å—Ç–∞—Ç—É—Å
            status = "–°–≤–æ–±–æ–¥–Ω–æ" if ("–ï—Å—Ç—å –º–µ—Å—Ç–∞" in text or "–î–æ—Å—Ç—É–ø–Ω–æ" in text or "–°–≤–æ–±–æ–¥" in text) else "–ù–µ—Ç –º–µ—Å—Ç"

            # –¥–∞—Ç–∞ ‚Äî –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ—á–∫—É/–∫—É—Å–æ–∫, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –¥–∞—Ç—É
            # —á–∞—Å—Ç–æ –¥–∞—Ç–∞ –∫—Ä—É–ø–Ω–µ–µ –∏ —Å—Ç–æ–∏—Ç –≤ –Ω–∞—á–∞–ª–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            # –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –≤—ã—á–ª–µ–Ω–∏–º —á–∏—Å–ª–æ + –º–µ—Å—è—Ü, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
            date = text.split("  ")[0].strip() if "  " in text else text.splitlines()[0].strip()
            # –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—á–∏—Å—Ç–∏–º –º—É—Å–æ—Ä
            date = date.replace("–ï—Å—Ç—å –º–µ—Å—Ç–∞", "").replace("–ù–µ—Ç –º–µ—Å—Ç", "").strip()
            if date:
                slots.append({"date": date, "status": status})

        return slots

    # Fallback: –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ—Å–º–æ—Ç—Ä–∏–º –ø—Ä–æ—Å—Ç–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    text = soup.get_text("\n", strip=True)
    lines = [ln for ln in text.splitlines() if ln]

    for ln in lines:
        if "–ï—Å—Ç—å –º–µ—Å—Ç–∞" in ln or "–°–≤–æ–±–æ–¥" in ln:
            slots.append({"date": ln.replace("–ï—Å—Ç—å –º–µ—Å—Ç–∞", "").strip(), "status": "–°–≤–æ–±–æ–¥–Ω–æ"})
        elif "–ù–µ—Ç –º–µ—Å—Ç" in ln:
            slots.append({"date": ln.replace("–ù–µ—Ç –º–µ—Å—Ç", "").strip(), "status": "–ù–µ—Ç –º–µ—Å—Ç"})

    return slots


# ---------- –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–æ–Ω ----------
def one_check_run() -> None:
    driver = make_driver()
    try:
        login(driver)
        time.sleep(2)

        html = driver.page_source
        with open("page.html", "w", encoding="utf-8") as f:
            f.write(html)

        slots = parse_slots_from_html(html)
        has_free = any(s.get("status") == "–°–≤–æ–±–æ–¥–Ω–æ" for s in slots)

        # –¥–ª—è –ª–æ–≥–æ–≤ –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏
        free_dates = [(s.get("date") or "").strip() for s in slots if s.get("status") == "–°–≤–æ–±–æ–¥–Ω–æ"]
        if free_dates:
            logging.info("===> –ù–∞–π–¥–µ–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã: %d —à—Ç.", len(free_dates))
            for d in free_dates:
                logging.info("FREE_DATE: %s", d)
        else:
            logging.info("===> –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.")

        snapshot = json.dumps(slots, ensure_ascii=False, sort_keys=True)
        last = load_last_snapshot()

        if snapshot != last:
            if has_free or (not ONLY_NOTIFY_WHEN_FREE):
                ts = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M")
                text = (
                    f"üö® –ü–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –°–ò–ó–û-11! [{ts}]\n\n"
                    f"{format_slots(slots, only_available=True)}\n\n"
                    f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç—É—Ç: <a href='{TARGET_URL}'>—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–∏—Å–∏</a>"
                )
                send_tg(text)

            save_snapshot(snapshot)  # —Å–Ω–∏–º–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
        else:
            logging.info("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (snapshot –Ω–µ –º–µ–Ω—è–ª—Å—è).")

    except Exception:
        logging.exception("FATAL")
        # –°–æ—Ö—Ä–∞–Ω–∏–º —Å–∫—Ä–∏–Ω –∏ html –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–±–æ—Ä–æ–≤ –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö
        try:
            driver.save_screenshot("page.png")
            with open("page.html", "w", encoding="utf-8") as f:
                f.write(driver.page_source)
        except Exception:
            pass
        raise
    finally:
        driver.quit()


if __name__ == "__main__":
    one_check_run()
