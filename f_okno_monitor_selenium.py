# -*- coding: utf-8 -*-
"""
–ú–æ–Ω–∏—Ç–æ—Ä —Å–ª–æ—Ç–æ–≤ –§-–û–ö–ù–û (–°–ò–ó–û-11 –ù–æ–≥–∏–Ω—Å–∫).

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ë–µ–∑ webdriver_manager: –ø–æ–¥–±–æ—Ä chromedriver –¥–µ–ª–∞–µ—Ç Selenium Manager.
- –í—Ä–µ–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö ‚Äî –ø–æ –ú–æ—Å–∫–≤–µ (Europe/Moscow).
- –°–æ–æ–±—â–µ–Ω–∏–µ —à–ª—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç
  (–∏–ª–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ ONLY_NOTIFY_WHEN_FREE=0).
- –°–Ω–∞–ø—à–æ—Ç –≤ STATE_FILE –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏.
- –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã page.html/page.png/run.log —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
"""

from __future__ import annotations

import os
import json
import time
import logging
from typing import List, Dict
from datetime import datetime

from zoneinfo import ZoneInfo
from bs4 import BeautifulSoup

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC  # noqa: F401
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException

import requests


# -------------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ ENV ---------------------------

LOGIN_URL = os.getenv(
    "LOGIN_URL",
    "https://f-okno.ru/login?request_uri=%2Fbase%2Fmoscovskaya_oblast%2Fsizo11noginsk",
)

TARGET_URL = os.getenv(
    "TARGET_URL",
    "https://f-okno.ru/base/moscovskaya_oblast/sizo11noginsk",
)

STATE_FILE = os.getenv("STATE_FILE", "state_sizo11.json")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")  # id —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —à–ª—ë–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã
ONLY_NOTIFY_WHEN_FREE = os.getenv("ONLY_NOTIFY_WHEN_FREE", "1") == "1"


# –õ–æ–≥ –≤ —Ñ–∞–π–ª ‚Äî GitHub Actions –ø–æ–¥–Ω–∏–º–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–º
logging.basicConfig(
    filename="run.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
log = logging.getLogger(__name__)


# --------------------------- –£—Ç–∏–ª–∏—Ç—ã –∏ I/O --------------------------------

def load_last_snapshot() -> str:
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        return ""


def save_snapshot(s: str) -> None:
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        f.write(s)


def send_tg(text: str, parse_mode: str = "HTML") -> None:
    if not (TELEGRAM_TOKEN and TELEGRAM_CHAT_ID):
        log.info("TELEGRAM creds not set ‚Äî skipping send.")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True,
    }
    try:
        r = requests.post(url, data=data, timeout=20)
        if r.status_code != 200:
            log.warning("Telegram send failed: %s %s", r.status_code, r.text)
    except Exception:
        log.exception("Telegram send fatal")


# ------------------------------ WebDriver ---------------------------------

def make_driver() -> webdriver.Chrome:
    """
    –°–æ–∑–¥–∞—ë—Ç Chrome, –ø–æ–ª–∞–≥–∞—è—Å—å –Ω–∞ Selenium Manager –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ chromedriver.
    –ï—Å–ª–∏ –≤ ENV –µ—Å—Ç—å CHROME_PATH (–ø—Ä–æ–∫–∏–Ω—É—Ç—ã–π –∏–∑ workflow), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
    """
    opts = Options()
    opts.add_argument("--headless=new")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.add_argument("--window-size=1280,2200")

    chrome_path = os.getenv("CHROME_PATH") or os.getenv("CHROME_BIN")
    if chrome_path:
        opts.binary_location = chrome_path

    # Service() –±–µ–∑ executable_path ‚Üí Selenium Manager —Å–∞–º –ø–æ–¥–±–µ—Ä—ë—Ç –¥—Ä–∞–π–≤–µ—Ä
    service = Service()
    drv = webdriver.Chrome(service=service, options=opts)
    drv.set_page_load_timeout(60)
    return drv


def safe_get(driver: webdriver.Chrome, url: str, wait_css: str | None = None, timeout: int = 30) -> None:
    driver.get(url)
    if wait_css:
        try:
            WebDriverWait(driver, timeout).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, wait_css))
            )
        except TimeoutException:
            log.warning("Timeout waiting for %s on %s", wait_css, url)


def login(driver: webdriver.Chrome) -> None:
    """
    –õ—ë–≥–∫–∏–π ¬´–ª–æ–≥–∏–Ω¬ª: –æ—Ç–∫—Ä—ã–≤–∞–µ–º LOGIN_URL (—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫—É–∫–∏),
    –∑–∞—Ç–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É TARGET_URL.
    –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å ‚Äî –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –≤–≤–æ–¥ –≤ –ø–æ–ª—è.
    """
    safe_get(driver, LOGIN_URL)
    time.sleep(1.5)
    safe_get(driver, TARGET_URL)
    time.sleep(1.0)


# ------------------------------ –ü–∞—Ä—Å–∏–Ω–≥ -----------------------------------

def parse_slots_from_html(html: str) -> List[Dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ dict: {"date": "...", "status": "–°–≤–æ–±–æ–¥–Ω–æ"/"..."}.
    –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Ä–ø–∏–º –∫ –≤—ë—Ä—Å—Ç–∫–µ: –∏—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–Ω–µ–π –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã.
    """
    soup = BeautifulSoup(html, "lxml")
    slots: List[Dict] = []

    # 1) –ß–∞—Å—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî ¬´–ø–ª–∏—Ç–∫–∏¬ª –¥–Ω–µ–π/–∫–∞–ª–µ–Ω–¥–∞—Ä—å
    day_nodes = soup.select(".day, .calendar-day, .slot, .slots-list .slot, .calendar .day")
    if day_nodes:
        for n in day_nodes:
            text = n.get_text(" ", strip=True)
            if not text:
                continue
            status = "–°–≤–æ–±–æ–¥–Ω–æ" if ("–ï—Å—Ç—å –º–µ—Å—Ç–∞" in text or "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" in text or "–°–≤–æ–±–æ–¥–Ω" in text) else ""
            date_part = text
            for marker in ["–ï—Å—Ç—å –º–µ—Å—Ç–∞", "–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ—Ç", "–º–µ—Å—Ç –Ω–µ—Ç", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"]:
                date_part = date_part.replace(marker, "").strip()
            if status:
                slots.append({"date": date_part, "status": status})
            else:
                slots.append({"date": date_part, "status": "–ù–µ—Ç –º–µ—Å—Ç"})
        return slots

    # 2) –§–æ–ª–ª–±–µ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    text = soup.get_text("\n", strip=True)
    if "–ï—Å—Ç—å –º–µ—Å—Ç–∞" in text or "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" in text:
        slots.append({"date": "", "status": "–°–≤–æ–±–æ–¥–Ω–æ"})
    else:
        slots.append({"date": "", "status": "–ù–µ—Ç –º–µ—Å—Ç"})

    return slots


# --------------------------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ -------------------------------

def format_slots(slots: List[Dict], only_available: bool = True) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞:
      ‚úÖ <b>16 –æ–∫—Ç—è–±—Ä—è —á–µ—Ç–≤–µ—Ä–≥</b>
    –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–µ—Ç ‚Äî ¬´–°–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç.¬ª
    """
    if not slots:
        return "–°–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç."

    filtered = [s for s in slots if s.get("status") == "–°–≤–æ–±–æ–¥–Ω–æ"] if only_available else slots
    if not filtered:
        return "–°–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç."

    lines = []
    for s in filtered:
        d = (s.get("date") or "").strip() or "–°–≤–æ–±–æ–¥–Ω–æ"
        lines.append(f"‚úÖ <b>{d}</b>")
    return "\n".join(lines)


# ------------------------------ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–æ–Ω ---------------------------

def one_check_run() -> None:
    """
    –û–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
      - –≥—Ä—É–∑–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      - –ø–∞—Ä—Å–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã
      - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ —Å–Ω–∞–ø—à–æ—Ç–æ–º
      - —à–ª—ë–º Telegram (—Ñ–∏–ª—å—Ç—Ä –ø–æ ONLY_NOTIFY_WHEN_FREE)
    """
    ts_msk = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M")

    driver = make_driver()
    try:
        login(driver)

        html = driver.page_source
        with open("page.html", "w", encoding="utf-8") as f:
            f.write(html)

        slots = parse_slots_from_html(html)
        has_free = any(s.get("status") == "–°–≤–æ–±–æ–¥–Ω–æ" for s in slots)

        # –ª–æ–≥: —á—Ç–æ –Ω–∞—à–ª–∏
        free_dates = [(s.get("date") or "").strip() for s in slots if s.get("status") == "–°–≤–æ–±–æ–¥–Ω–æ"]
        if free_dates:
            log.info("===> –ù–∞–π–¥–µ–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã: %d", len(free_dates))
            for d in free_dates:
                log.info("FREE_DATE: %s", d)
        else:
            log.info("===> –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.")

        snapshot = json.dumps(slots, ensure_ascii=False, sort_keys=True)
        last = load_last_snapshot()

        if snapshot != last:
            if has_free or not ONLY_NOTIFY_WHEN_FREE:
                text = (
                    f"üö® –ü–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –°–ò–ó–û-11! "
                    f"[{ts_msk}]\n\n"
                    f"{format_slots(slots, only_available=True)}\n\n"
                    f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç—É—Ç: <a href='{TARGET_URL}'>—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–∏—Å–∏</a>"
                )
                send_tg(text)
            # —Å–Ω–∞–ø—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ–≥–¥–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            save_snapshot(snapshot)
        else:
            log.info("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (snapshot match).")

    except Exception:
        log.exception("FATAL")
        try:
            driver.save_screenshot("page.png")
            with open("page.html", "w", encoding="utf-8") as f:
                f.write(driver.page_source)
        except Exception:
            pass
        raise
    finally:
        driver.quit()


# --------------------------------- main -----------------------------------

if __name__ == "__main__":
    log.info("=== RUN START (MSK %s) ===", datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S"))
    fail_on_error = os.getenv("FAIL_ON_ERROR", "1") == "1"
    try:
        one_check_run()
    except Exception:
        if fail_on_error:
            raise
        else:
            log.exception("Suppressed failure (FAIL_ON_ERROR=0)")
    finally:
        log.info("=== RUN END ===")
