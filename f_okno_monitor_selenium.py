import os
import time
import json
import logging
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import List, Dict

from dotenv import load_dotenv
from bs4 import BeautifulSoup

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

from telegram import Bot

# .env –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞; –Ω–∞ GitHub Actions –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–¥—É—Ç –∏–∑ secrets
load_dotenv()

# ==== –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
EMAIL = os.getenv("F_OKNO_EMAIL")
PASSWORD = os.getenv("F_OKNO_PASSWORD")

LOGIN_URL = os.getenv(
    "LOGIN_URL",
    "https://f-okno.ru/login?request_uri=%2Fbase%2Fmoscovskaya_oblast%2Fsizo11noginsk",
)
TARGET_URL = os.getenv(
    "TARGET_URL",
    "https://f-okno.ru/base/moscovskaya_oblast/sizo11noginsk",
)
STATE_FILE = os.getenv("STATE_FILE", "state_sizo11.json")

# –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ Actions –∑–∞–¥–∞—ë—Ç cron, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL_MIN", "3")) * 60

# ==== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("f-okno-selenium")
# —Ñ–∞–π–ª-–ª–æ–≥ –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ Actions
try:
    fh = logging.FileHandler("run.log", encoding="utf-8")
    fh.setFormatter(logging.Formatter("%(asctime)s [%(levelname)s] %(message)s"))
    log.addHandler(fh)
except Exception:
    pass

bot = Bot(token=TELEGRAM_TOKEN)


from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager  # –∫–∞–∫ –∏ –±—ã–ª–æ


from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
import os

def make_driver():
    opts = Options()
    opts.add_argument("--headless=new")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.add_argument("--window-size=1280,2000")

    # –≠–∫—à–µ–Ω setup-chrome –¥–∞–ª –ø—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–∏–∫—É Chromium
    chrome_path = os.getenv("CHROME_PATH") or os.getenv("CHROME_BIN")
    if chrome_path:
        opts.binary_location = chrome_path

    # –ö–õ–Æ–ß–ï–í–û–ï: –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å executable_path ‚Äî Selenium Manager —Å–∞–º –ø–æ–¥–±–µ—Ä—ë—Ç chromedriver
    service = Service()

    driver = webdriver.Chrome(service=service, options=opts)
    driver.set_page_load_timeout(60)
    return driver

def login(driver: webdriver.Chrome):
    log.info("–û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞‚Ä¶")
    driver.get(LOGIN_URL)
    wait = WebDriverWait(driver, 20)

    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è f-okno (–∑–∞–º–µ–Ω–∏–ª–∏ email->login, password->pass)
    email_candidates = [
        (By.NAME, "login"),
        (By.CSS_SELECTOR, "input[name='login']"),
    ]
    pwd_candidates = [
        (By.NAME, "pass"),
        (By.CSS_SELECTOR, "input[name='pass']"),
    ]
    submit_candidates = [
        (By.CSS_SELECTOR, "#login_form .pre_button"),
        (By.XPATH, "//a[contains(.,'–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')]"),
    ]

    def find_first(cands):
        for how, what in cands:
            try:
                return wait.until(EC.presence_of_element_located((how, what)))
            except Exception:
                continue
        raise RuntimeError(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã: {cands}")

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è –∏ –≤–≤–æ–¥–∏–º —É—á—ë—Ç–∫–∏
    email_input = find_first(email_candidates)
    pwd_input = find_first(pwd_candidates)
    email_input.clear(); email_input.send_keys(EMAIL)
    pwd_input.clear();   pwd_input.send_keys(PASSWORD)

    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—ç—Ç–æ <a ... onclick="doForm('login_form')">)
    find_first(submit_candidates).click()

    # –î–∞–¥–∏–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç/–ø–æ–¥–≥—Ä—É–∑–∫—É, –∑–∞—Ç–µ–º —è–≤–Ω–æ –ø–µ—Ä–µ–π–¥—ë–º –Ω–∞ —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    time.sleep(2)
    driver.get(TARGET_URL)
    wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
    log.info("–õ–æ–≥–∏–Ω –∑–∞–≤–µ—Ä—à—ë–Ω, —Ü–µ–ª–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞.")

def parse_slots_from_html(html: str) -> List[Dict]:
    soup = BeautifulSoup(html, "lxml")
    out: List[Dict] = []

    items = soup.select("#graphic_container .graphic_item")
    if not items:
        # fallback: —Ö–æ—Ç—è –±—ã –ø–æ–Ω—è—Ç—å ‚Äî –µ—Å—Ç—å –ª–∏ –≥–¥–µ-—Ç–æ ¬´–ï—Å—Ç—å –º–µ—Å—Ç–∞¬ª
        text = soup.get_text(" ", strip=True)
        status = "–°–≤–æ–±–æ–¥–Ω–æ" if ("–ï—Å—Ç—å –º–µ—Å—Ç–∞" in text or "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" in text) else "–ù–µ—Ç –º–µ—Å—Ç"
        return [{"date": "", "time": "", "status": status}]

    for item in items:
        date_el = item.select_one(".graphic_item_date")
        date_txt = date_el.get_text(" ", strip=True) if date_el else ""

        classes = set(item.get("class", []))
        slots_el = item.select_one(".graphic_item_slots")
        slots_txt = slots_el.get_text(" ", strip=True) if slots_el else ""

        # ¬´–°–≤–æ–±–æ–¥–Ω–æ¬ª, –µ—Å–ª–∏ —è–≤–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ ¬´–ï—Å—Ç—å –º–µ—Å—Ç–∞¬ª, –∏–ª–∏ –¥–µ–Ω—å –∑–µ–ª—ë–Ω—ã–π
        is_free = ("–ï—Å—Ç—å –º–µ—Å—Ç–∞" in slots_txt) or any(c in {"green", "available", "free"} for c in classes)

        out.append({"date": date_txt, "time": "", "status": "–°–≤–æ–±–æ–¥–Ω–æ" if is_free else "–ù–µ—Ç –º–µ—Å—Ç"})

    return out


def load_last_snapshot() -> str:
    if not os.path.exists(STATE_FILE):
        return ""
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return f.read()
    except Exception:
        return ""


def save_snapshot(s: str):
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            f.write(s)
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–∞–ø—à–æ—Ç: %s", e)


def format_slots(slots: List[Dict], only_available: bool = True) -> str:
    if not slots:
        return "–°–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç."

    # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    filtered = [s for s in slots if (s.get("status") == "–°–≤–æ–±–æ–¥–Ω–æ")] if only_available else slots
    if not filtered:
        return "–°–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç."

    lines = []
    for s in filtered:
        d = (s.get("date") or "").strip()
        # ‚úÖ –∏ –∂–∏—Ä–Ω—ã–º ‚Äî –∑–∞–º–µ—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç
        lines.append(f"‚úÖ <b>{d}</b>")
    return "\n".join(lines)


import asyncio  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å –≤–≤–µ—Ä—Ö—É

def send_tg(text: str):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        log.error("TELEGRAM_* –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return

    async def _go():
        chat = TELEGRAM_CHAT_ID.strip()
        chat_id = chat if chat.startswith("@") else int(chat)
        await bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")

    asyncio.run(_go())


def one_check_run():
    """–û–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω. –®–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã
    (–∏–ª–∏ –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω —Ñ–∏–ª—å—Ç—Ä ONLY_NOTIFY_WHEN_FREE)."""
    driver = make_driver()
    try:
        login(driver)
        time.sleep(2)

        html = driver.page_source
        with open("page.html", "w", encoding="utf-8") as f:
            f.write(html)

        slots = parse_slots_from_html(html)
        has_free = any(s.get("status") == "–°–≤–æ–±–æ–¥–Ω–æ" for s in slots)
        # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –∏—Ç–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ª–æ–≥–∏ GitHub Actions –∏ –≤ run.log
        free_dates = [(s.get("date") or "").strip() for s in slots if s.get("status") == "–°–≤–æ–±–æ–¥–Ω–æ"]
        if free_dates:
            log.info("===> –ù–∞–π–¥–µ–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã: %d —à—Ç.", len(free_dates))
            for d in free_dates:
                log.info("FREE_DATE: %s", d)
        else:
            log.info("===> –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.")

        snapshot = json.dumps(slots, ensure_ascii=False, sort_keys=True)
        last = load_last_snapshot()

        # –≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–ª–∞—Ç—å –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç
        ONLY_NOTIFY_WHEN_FREE = os.getenv("ONLY_NOTIFY_WHEN_FREE", "1") == "1"

        if snapshot != last:
            if has_free or not ONLY_NOTIFY_WHEN_FREE:
                ts = datetime.now(ZoneInfo("Europe/Moscow")).strftime('%Y-%m-%d %H:%M')
                text = (
                    f"üö® –ü–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –°–ò–ó–û-11! "
                    f"[{ts}]\n\n"
                    f"{format_slots(slots, only_available=True)}\n\n"
                    f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç—É—Ç: <a href='{TARGET_URL}'>—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–∏—Å–∏</a>"
                )
                send_tg(text)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫ –í–°–ï–ì–î–ê, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
            save_snapshot(snapshot)
        else:
            log.info("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

    except Exception:
        log.exception("FATAL")
        try:
            driver.save_screenshot("page.png")
            with open("page.html", "w", encoding="utf-8") as f:
                f.write(driver.page_source)
        except Exception:
            pass
        raise
    finally:
        driver.quit()


if __name__ == "__main__":
    # –í Actions –Ω—É–∂–µ–Ω –æ–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω
    one_check_run()
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—Ä—É—á–µ–Ω–∏—è –ø–æ –∫—Ä—É–≥—É –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ü–∏–∫–ª:
    # while True: one_check_run(); time.sleep(CHECK_INTERVAL)
